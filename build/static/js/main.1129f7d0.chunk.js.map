{"version":3,"sources":["components/main/main.jsx","components/game2/data.jsx","components/game2/selectGame.jsx","components/game1/dragAndDrop.jsx","components/footer.jsx","components/firebase-config.jsx","components/header.jsx","components/App.jsx","index.js"],"names":["Main","navigate","useNavigate","className","onClick","Data","id","question","options","answer","SelectGame","props","loadQuiz","currentIndex","state","setState","checkAnswer","userAnswer","disabled","nextQuestionHander","score","finishHandler","length","quizEnd","this","prevProps","prevState","map","item","index","key","option","Component","itemsFromBackend","uuid","content","name","items","Footer","Date","getFullYear","achieveAuth","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementID","getAuth","Header","class","size","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1129f7d0.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css';\nimport {useNavigate} from 'react-router-dom';\n\nconst Main = () => {\n  let navigate = useNavigate();\n  return (\n    <div className=\"landing-page\">\n      <h1>Welcome to Achieve!</h1>\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => {\n          navigate(\"/game2\");\n        }}\n      >\n        Let's begin\n      </button>\n    </div>\n  );\n}\n\nexport default Main","export const Data = [\n  {\n    id: 1,\n    question: `This is a long yellow fruit. Monkeys love to eat it. Which fruit is it?`,\n    options: [`Orange`, `Apple`, `Pear`, `Banana`],\n    answer: `Banana`,\n  },\n  {\n    id: 2,\n    question: `This red fruit is often mistaken for a vegetable. It is quite popular as soup. Which fruit is it?`,\n    options: [`Papaya`, `Tomato`, `Apple`, `Kiwi`],\n    answer: `Tomato`,\n  },\n  {\n    id: 3,\n    question: `One a day keeps the doctor away. Which fruit is it?`,\n    options: [`Grapefruit`, `Guava`, `Apple`, `Coconut`],\n    answer: `Apple`,\n  },\n  {\n    id: 4,\n    question: `Some people don't like it on a pizza. It has a prickly outside and is yellow inside. Which fruit is it?`,\n    options: [`Pineapple`, `Apricots`, `Mango`, `Clementine`],\n    answer: `Pineapple`,\n  },\n  {\n    id: 5,\n    question: `This fruit is green on the outside and red on the inside. Which fruit is it?`,\n    options: [`Apple`, `Strawberry`, `Avacado`, `Watermelon`],\n    answer: `Watermelon`,\n  },\n];\n","import React, { Component } from \"react\";\nimport './selectGame.css';\nimport {Data} from \"./data\";\n\nexport class SelectGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userAnswer: null,\n      currentIndex: 0,\n      options: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true,\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuiz();\n  }\n\n  //Component that holds the current quiz\n  loadQuiz = () => {\n    const { currentIndex } = this.state; //get the current question index\n    this.setState(() => {\n      return {\n        question: Data[currentIndex].question,\n        options: Data[currentIndex].options,\n        answer: Data[currentIndex].answer,\n      };\n    });\n  };\n \n  componentDidUpdate(prevProps, prevState) {\n    const { currentIndex } = this.state;\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          question: Data[currentIndex].question,\n          options: Data[currentIndex].options,\n          answer: Data[currentIndex].answer,\n        };\n      });\n    }\n  }\n\n  //Check the answer\n  checkAnswer = (answer) => {\n    this.setState({\n      userAnswer: answer,\n      disabled: false,\n    });\n  };\n\n  nextQuestionHander = () => {\n    const { userAnswer, answer, score } = this.state;\n    this.setState({\n      currentIndex: this.state.currentIndex + 1,\n    });\n\n    //Check if correct answer and increment score\n    if (userAnswer === answer) {\n      this.setState({\n        score: score + 1,\n      });\n    }\n  };\n\n  finishHandler = () => {\n    const { score } = this.state;\n    if (this.state.currentIndex === Data.length - 1) {\n      this.setState({\n        quizEnd: true,\n        score: score + 1\n      });\n    }\n  };\n\n  render() {\n    const { question, options, currentIndex, userAnswer, quizEnd } = this.state; //get the current state\n\n    if (quizEnd) {\n      return (\n        <div className=\"centered\">\n          <h2>Game Over. Final score is {this.state.score} points</h2>\n          <h3>The correct Answers for the quiz are</h3>\n          <ul>\n            {Data.map((item, index) => (\n              <li className=\"options\" key={index}>\n                Question: {item.question}\n                <br></br>\n                Answer: {item.answer}\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"centered\">\n        <span className=\"question\">{`Question ${currentIndex + 1} of ${\n          Data.length\n        }`}</span>\n        <h2>{question}</h2>\n        {options.map(\n          (\n            option //for each option, new paragraph\n          ) => (\n            <p\n              key={option.id}\n              className={` options\n                ${userAnswer === option ? \"selected\" : null}\n                `}\n              onClick={() => this.checkAnswer(option)}\n            >\n              {option}\n            </p>\n          )\n        )}\n        {currentIndex < Data.length - 1 && (\n          <button\n            className=\"button btn btn-primary\"\n            disabled={this.state.disabled}\n            onClick={this.nextQuestionHander}\n          >\n            Next Question\n          </button>\n        )}\n        {currentIndex === Data.length - 1 && (\n          <button\n            className=\"button btn btn-primary\"\n            disabled={this.state.disabled}\n            onClick={this.finishHandler}\n          >\n            Finish\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SelectGame;\n","import React from 'react';\nimport { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport uuid from \"uuid/v4\";\nimport './dragAndDrop.css'\n\nconst itemsFromBackend = [\n  { id: uuid(), content: \"Apple\" },\n  { id: uuid(), content: \"Banana\" },\n  { id: uuid(), content: \"Brocolli\" },\n  { id: uuid(), content: \"Cauliflower\" },\n  { id: uuid(), content: \"Grapes\" },\n  { id: uuid(), content: \"Spinach\" },\n];\n\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: \"Items\",\n    items: itemsFromBackend\n  },\n  [uuid()]: {\n    name: \"Fruits\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"Vegetables\",\n    items: []\n  }\n};\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\n\nconst DragAndDrop = () => {\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div className='setup'>\n      <DragDropContext\n        onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\n      >\n        {Object.entries(columns).map(([columnId, column], index) => {\n          return (\n            <div className=\"indi-columns\" key={columnId}>\n              <h2>{column.name}</h2>\n              <div className=\"column\">\n                <Droppable droppableId={columnId} key={columnId}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver\n                            ? \"white\"\n                            : \"lightgrey\",\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500,\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: \"none\",\n                                      padding: 16,\n                                      margin: \"0 0 8px 0\",\n                                      minHeight: \"50px\",\n                                      backgroundColor: snapshot.isDragging\n                                        ? \"#263B4A\"\n                                        : \"#456C86\",\n                                      color: \"white\",\n                                      ...provided.draggableProps.style,\n                                    }}\n                                  >\n                                    {item.content}\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </DragDropContext>\n      <div >\n        <button className=\"button btn btn-primary\">Finish</button>\n      </div>\n    </div>\n  );\n}\n\nexport default DragAndDrop","import React from \"react\";\n\nexport default function Footer() {\nreturn <footer>\n    <div className=\"footer\">Copyright © {new Date().getFullYear()}</div>\n</footer>\n}\n","import { initializeApp } from \"firebase/app\";\nimport {getAuth} from 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementID: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst achieveAuth = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(achieveAuth)","import React from \"react\";\nimport {FaHome} from 'react-icons/fa'\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Header() {\n  let navigate = useNavigate();\n  return (\n    <div class=\"header\">\n      <h3>\n        <FaHome\n          size={\"1.5rem\"}\n          onClick={() => {\n            navigate(\"/\");\n          }}\n        />\n      </h3>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {BrowserRouter as Router, Routes, Route} from \"react-router-dom\"; \nimport Main from \"../components/main/main\";\nimport Choice from \"../components/choice/choice\"\nimport SelectGame from \"../components/game2/selectGame\"\nimport DragAndDrop from \"../components/game1/dragAndDrop\";\nimport Footer from \"./footer\";\nimport Signup from \"./signup/signup\";\nimport Header from \"./header\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n      </div>\n      <Routes>\n        {/* <Route path=\"/\" element={<Signup />} /> */}\n        <Route path=\"/\" element={<Main />} />\n        {/* <Route path=\"/choice\" element={<Choice />} /> */}\n        {/* <Route path=\"/game1\" element={<DragAndDrop />} /> */}\n        <Route path=\"/game2\" element={<SelectGame />} />\n      </Routes>\n\n      <div>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}